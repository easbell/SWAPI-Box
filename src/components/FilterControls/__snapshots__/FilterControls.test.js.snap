// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilterControls should match snapshot with all data passed in 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <FilterControls
    handleSort={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "handleSort": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="filter"
      >
        <button
          class="people"
        >
          People
        </button>
        <button
          class="planets"
        >
          Planets
        </button>
        <button
          class="vehicles"
        >
          Vehicles
        </button>
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="people"
            onClick={[Function]}
          >
            People
          </button>,
          <button
            className="planets"
            onClick={[Function]}
          >
            Planets
          </button>,
          <button
            className="vehicles"
            onClick={[Function]}
          >
            Vehicles
          </button>,
        ],
        "className": "filter",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <button
            class="people"
          >
            People
          </button>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "People",
            "className": "people",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            "People",
          ],
          "type": "button",
        },
        Object {
          "instance": <button
            class="planets"
          >
            Planets
          </button>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Planets",
            "className": "planets",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            "Planets",
          ],
          "type": "button",
        },
        Object {
          "instance": <button
            class="vehicles"
          >
            Vehicles
          </button>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Vehicles",
            "className": "vehicles",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            "Vehicles",
          ],
          "type": "button",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "handleSort": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="filter"
        >
          <button
            class="people"
          >
            People
          </button>
          <button
            class="planets"
          >
            Planets
          </button>
          <button
            class="vehicles"
          >
            Vehicles
          </button>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="people"
              onClick={[Function]}
            >
              People
            </button>,
            <button
              className="planets"
              onClick={[Function]}
            >
              Planets
            </button>,
            <button
              className="vehicles"
              onClick={[Function]}
            >
              Vehicles
            </button>,
          ],
          "className": "filter",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <button
              class="people"
            >
              People
            </button>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "People",
              "className": "people",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              "People",
            ],
            "type": "button",
          },
          Object {
            "instance": <button
              class="planets"
            >
              Planets
            </button>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Planets",
              "className": "planets",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              "Planets",
            ],
            "type": "button",
          },
          Object {
            "instance": <button
              class="vehicles"
            >
              Vehicles
            </button>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Vehicles",
              "className": "vehicles",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              "Vehicles",
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
